pipeline {
    agent any

    environment {
        DOTNET_ROOT = tool name: 'dotnet-sdk', type: 'com.microsoft.jenkins.dotnet.tools.DotNetSDKInstaller'
        PATH = "${env.DOTNET_ROOT}/bin:${env.PATH}"
        SONARQUBE_SCANNER_HOME = tool 'SonarQubeScanner'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
        AWS_CREDENTIALS = credentials('aws')
    }

    stages {
        stage('Build') {
            steps {
                script {
                    if (isUnix()) {
                        sh 'dotnet build vector-simple-dynamic.sln'
                    } else {
                        bat 'dotnet build vector-simple-dynamic.sln'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    if (isUnix()) {
                        sh 'dotnet test vector-simple-dynamic.csproj --logger:trx'
                    } else {
                        bat 'dotnet test vector-simple-dynamic.csproj --logger:trx'
                    }
                }
                junit 'TestResults/*.trx'
            }
        }

        stage('Code Quality Analysis') {
            steps {
                script {
                    if (isUnix()) {
                        sh "${SONARQUBE_SCANNER_HOME}/bin/sonar-scanner"
                    } else {
                        bat "${SONARQUBE_SCANNER_HOME}\\bin\\sonar-scanner.bat"
                    }
                }
            }
        }

        stage('Deploy to Test Environment') {
            steps {
                script {
                    if (isUnix()) {
                        sh 'docker build -t your-image-name:latest .'
                        sh 'docker run -d -p 8080:80 your-image-name:latest'
                    } else {
                        bat 'docker build -t your-image-name:latest .'
                        bat 'docker run -d -p 8080:80 your-image-name:latest'
                    }
                }
            }
        }

        stage('Release to Production') {
            steps {
                script {
                    // Replace with actual deployment commands
                    sh 'aws deploy create-deployment --application-name <your-app-name> --deployment-group-name <your-deployment-group> --s3-location bucket=<your-bucket>,key=<your-key>,bundleType=zip'
                }
            }
        }

        stage('Monitoring and Alerting') {
            steps {
                script {
                    // Example using Datadog
                    sh 'datadog-agent status'
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution complete.'
        }
        success {
            echo 'Build and tests succeeded.'
        }
        failure {
            echo 'Build or tests failed.'
        }
    }
}
